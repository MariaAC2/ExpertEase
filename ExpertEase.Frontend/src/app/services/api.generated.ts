//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    adminAccountsGet(id: string): Observable<AccountDTORequestResponse> {
        let url_ = this.baseUrl + "/api/admin/accounts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccountsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccountsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountDTORequestResponse>;
        }));
    }

    protected processAccountsGET(response: HttpResponseBase): Observable<AccountDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AccountDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    adminAccountsPUT(id: string, body: AccountUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/accounts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccountsPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccountsPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processAccountsPUT(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    adminAccountsDELETE(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/accounts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccountsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccountsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processAccountsDELETE(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    categoriesPOST(body: CategoryAddDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processCategoriesPOST(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    categoriesGET(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<CategoryAdminDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/admin/categories?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryAdminDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryAdminDTOPagedResponseRequestResponse>;
        }));
    }

    protected processCategoriesGET(response: HttpResponseBase): Observable<CategoryAdminDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryAdminDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryAdminDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    categoriesGET2(id: string): Observable<CategoryAdminDTORequestResponse> {
        let url_ = this.baseUrl + "/api/admin/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryAdminDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryAdminDTORequestResponse>;
        }));
    }

    protected processCategoriesGET2(response: HttpResponseBase): Observable<CategoryAdminDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryAdminDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryAdminDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    categoriesPATCH(id: string, body: CategoryUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesPATCH(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesPATCH(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processCategoriesPATCH(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    categoriesDELETE(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processCategoriesDELETE(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    repliesGET(requestId: string, id: string): Observable<ReplyDTORequestResponse> {
        let url_ = this.baseUrl + "/api/admin/requests/{requestId}/replies/{id}";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReplyDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReplyDTORequestResponse>;
        }));
    }

    protected processRepliesGET(response: HttpResponseBase): Observable<ReplyDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReplyDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReplyDTORequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    repliesDELETE(id: string, requestId: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/requests/{requestId}/replies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processRepliesDELETE(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    repliesGET2(requestId: string, search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<ReplyDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/admin/requests/{requestId}/replies?";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReplyDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReplyDTOPagedResponseRequestResponse>;
        }));
    }

    protected processRepliesGET2(response: HttpResponseBase): Observable<ReplyDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReplyDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReplyDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    requestsGET(id: string): Observable<RequestDTORequestResponse> {
        let url_ = this.baseUrl + "/api/admin/requests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestDTORequestResponse>;
        }));
    }

    protected processRequestsGET(response: HttpResponseBase): Observable<RequestDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestDTORequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    requestsDELETE(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/requests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processRequestsDELETE(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    requestsGET2(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<RequestDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/admin/requests?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestDTOPagedResponseRequestResponse>;
        }));
    }

    protected processRequestsGET2(response: HttpResponseBase): Observable<RequestDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    specialistsGET(id: string): Observable<UserDTORequestResponse> {
        let url_ = this.baseUrl + "/api/admin/specialists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpecialistsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpecialistsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDTORequestResponse>;
        }));
    }

    protected processSpecialistsGET(response: HttpResponseBase): Observable<UserDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    specialistsPUT(id: string, body: SpecialistUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/specialists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpecialistsPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpecialistsPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processSpecialistsPUT(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    specialistsDELETE(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/specialists/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpecialistsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpecialistsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processSpecialistsDELETE(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    specialistsGET2(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<UserDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/admin/specialists?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpecialistsGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpecialistsGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDTOPagedResponseRequestResponse>;
        }));
    }

    protected processSpecialistsGET2(response: HttpResponseBase): Observable<UserDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    specialistsPOST(body: UserSpecialistAddDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/specialists";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpecialistsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpecialistsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processSpecialistsPOST(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    transactionsGET(id: string): Observable<TransactionDTORequestResponse> {
        let url_ = this.baseUrl + "/api/admin/transactions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TransactionDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TransactionDTORequestResponse>;
        }));
    }

    protected processTransactionsGET(response: HttpResponseBase): Observable<TransactionDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    transactionsPATCH(id: string, body: TransactionUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/transactions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsPATCH(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsPATCH(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processTransactionsPATCH(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    transactionsDELETE(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/transactions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processTransactionsDELETE(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    transactionsGET2(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<TransactionDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/admin/transactions?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TransactionDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TransactionDTOPagedResponseRequestResponse>;
        }));
    }

    protected processTransactionsGET2(response: HttpResponseBase): Observable<TransactionDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    usersGET(id: string): Observable<UserDTORequestResponse> {
        let url_ = this.baseUrl + "/api/admin/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersGET(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersGET(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDTORequestResponse>;
        }));
    }

    protected processUsersGET(response: HttpResponseBase): Observable<UserDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    usersPUT(id: string, body: UserUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersPUT(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersPUT(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processUsersPUT(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    usersDELETE(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/users/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersDELETE(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersDELETE(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processUsersDELETE(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    usersGET2(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<UserDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/admin/users?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersGET2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersGET2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDTOPagedResponseRequestResponse>;
        }));
    }

    protected processUsersGET2(response: HttpResponseBase): Observable<UserDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    usersPOST(body: UserAddDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/admin/users";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUsersPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUsersPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processUsersPOST(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    login(body: LoginDTO | undefined): Observable<LoginResponseDTORequestResponse> {
        let url_ = this.baseUrl + "/api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginResponseDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginResponseDTORequestResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginResponseDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResponseDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginResponseDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    register(body: UserRegisterDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    categoriesPOST2(body: CategorySpecialistDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesPOST2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesPOST2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processCategoriesPOST2(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    categoriesGET3(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<CategoryDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/categories?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesGET3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesGET3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryDTOPagedResponseRequestResponse>;
        }));
    }

    protected processCategoriesGET3(response: HttpResponseBase): Observable<CategoryDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    categoriesGET4(id: string): Observable<CategoryDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesGET4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesGET4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryDTORequestResponse>;
        }));
    }

    protected processCategoriesGET4(response: HttpResponseBase): Observable<CategoryDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CategoryDTORequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    categoriesDELETE2(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCategoriesDELETE2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCategoriesDELETE2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processCategoriesDELETE2(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    update(body: SpecialistUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    repliesPOST(requestId: string, body: ReplyAddDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests/{requestId}/replies";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processRepliesPOST(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    repliesGET3(requestId: string, search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<ReplyDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests/{requestId}/replies?";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesGET3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesGET3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReplyDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReplyDTOPagedResponseRequestResponse>;
        }));
    }

    protected processRepliesGET3(response: HttpResponseBase): Observable<ReplyDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReplyDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReplyDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    repliesGET4(requestId: string, id: string): Observable<ReplyDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests/{requestId}/replies/{id}";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesGET4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesGET4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReplyDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReplyDTORequestResponse>;
        }));
    }

    protected processRepliesGET4(response: HttpResponseBase): Observable<ReplyDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReplyDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReplyDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    repliesPATCH(requestId: string, id: string, body: ReplyUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests/{requestId}/replies/{id}";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesPATCH(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesPATCH(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processRepliesPATCH(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    requestsGET3(id: string): Observable<RequestDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsGET3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsGET3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestDTORequestResponse>;
        }));
    }

    protected processRequestsGET3(response: HttpResponseBase): Observable<RequestDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestDTORequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    requestsGET4(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<RequestDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsGET4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsGET4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestDTOPagedResponseRequestResponse>;
        }));
    }

    protected processRequestsGET4(response: HttpResponseBase): Observable<RequestDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    accept(id: string, body: RequestUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests/{id}/accept";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccept(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccept(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processAccept(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    reject(id: string, body: RequestUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/requests/{id}/reject";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReject(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReject(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processReject(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    transactionsGET3(id: string): Observable<TransactionDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/transactions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsGET3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsGET3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TransactionDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TransactionDTORequestResponse>;
        }));
    }

    protected processTransactionsGET3(response: HttpResponseBase): Observable<TransactionDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionDTORequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    transactionsGET4(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<TransactionDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/profile/specialist/transactions?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsGET4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsGET4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TransactionDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TransactionDTOPagedResponseRequestResponse>;
        }));
    }

    protected processTransactionsGET4(response: HttpResponseBase): Observable<TransactionDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    userAccountGET(): Observable<AccountDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/account";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccount(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccount(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AccountDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AccountDTORequestResponse>;
        }));
    }

    protected processAccount(response: HttpResponseBase): Observable<AccountDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AccountDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AccountDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    userAccountPUT(body: AccountUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/account/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processUpdate2(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    user(): Observable<UserDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDTORequestResponse>;
        }));
    }

    protected processUser(response: HttpResponseBase): Observable<UserDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    update3(body: UserUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processUpdate3(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    repliesGET5(requestId: string, id: string): Observable<ReplyDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests/{requestId}/replies/{id}";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesGET5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesGET5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReplyDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReplyDTORequestResponse>;
        }));
    }

    protected processRepliesGET5(response: HttpResponseBase): Observable<ReplyDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReplyDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReplyDTORequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    repliesGET6(requestId: string, search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<ReplyDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests/{requestId}/replies?";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRepliesGET6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRepliesGET6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ReplyDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ReplyDTOPagedResponseRequestResponse>;
        }));
    }

    protected processRepliesGET6(response: HttpResponseBase): Observable<ReplyDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ReplyDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ReplyDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    accept2(requestId: string, id: string, body: ReplyUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests/{requestId}/replies/{id}/accept";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAccept2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAccept2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processAccept2(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    reject2(requestId: string, id: string, body: ReplyUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests/{requestId}/replies/{id}/reject";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReject2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReject2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processReject2(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    requestsPOST(body: RequestAddDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processRequestsPOST(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    requestsGET5(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<RequestDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsGET5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsGET5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestDTOPagedResponseRequestResponse>;
        }));
    }

    protected processRequestsGET5(response: HttpResponseBase): Observable<RequestDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    requestsGET6(id: string): Observable<RequestDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestsGET6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestsGET6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestDTORequestResponse>;
        }));
    }

    protected processRequestsGET6(response: HttpResponseBase): Observable<RequestDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestDTORequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    (body: RequestUpdateDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/requests/update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processUpdate4(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return OK
     */
    userTransactionsPOST(body: TransactionAddDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/transactions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsPOST(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsPOST(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processTransactionsPOST(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }

    /**
     * @param search (optional)
     * @param page (optional)
     * @param pageSize (optional)
     * @return OK
     */
    userTransactionsGETPage(search: string | undefined, page: number | undefined, pageSize: number | undefined): Observable<TransactionDTOPagedResponseRequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/transactions?";
        if (search === null)
            throw new Error("The parameter 'search' cannot be null.");
        else if (search !== undefined)
            url_ += "Search=" + encodeURIComponent("" + search) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsGET5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsGET5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TransactionDTOPagedResponseRequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TransactionDTOPagedResponseRequestResponse>;
        }));
    }

    protected processTransactionsGET5(response: HttpResponseBase): Observable<TransactionDTOPagedResponseRequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionDTOPagedResponseRequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionDTOPagedResponseRequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    userTransactionsGET(id: string): Observable<TransactionDTORequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/transactions/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTransactionsGET6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTransactionsGET6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TransactionDTORequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TransactionDTORequestResponse>;
        }));
    }

    protected processTransactionsGET6(response: HttpResponseBase): Observable<TransactionDTORequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TransactionDTORequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TransactionDTORequestResponse>(null as any);
    }

    /**
     * @return OK
     */
    userTransactionCancelPUT(id: string): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/transactions/{id}/cancel";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancel(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processCancel(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class BecomeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional)
     * @return OK
     */
    becomeSpecialist(body: SpecialistAddDTO | undefined): Observable<RequestResponse> {
        let url_ = this.baseUrl + "/api/profile/user/become_specialist";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSpecialist(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSpecialist(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RequestResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RequestResponse>;
        }));
    }

    protected processSpecialist(response: HttpResponseBase): Observable<RequestResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RequestResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RequestResponse>(null as any);
    }
}

export class AccountDTO implements IAccountDTO {
    id!: string;
    currency!: string;
    balance!: number;

    constructor(data?: IAccountDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.currency = _data["currency"];
            this.balance = _data["balance"];
        }
    }

    static fromJS(data: any): AccountDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["currency"] = this.currency;
        data["balance"] = this.balance;
        return data;
    }
}

export interface IAccountDTO {
    id: string;
    currency: string;
    balance: number;
}

export class AccountDTORequestResponse implements IAccountDTORequestResponse {
    response?: AccountDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: IAccountDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? AccountDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AccountDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AccountDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAccountDTORequestResponse {
    response?: AccountDTO;
    errorMessage?: ErrorMessage;
}

export class AccountUpdateDTO implements IAccountUpdateDTO {
    userId!: string;
    currency?: string | undefined;
    amount?: number | undefined;

    constructor(data?: IAccountUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.currency = _data["currency"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): AccountUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AccountUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["currency"] = this.currency;
        data["amount"] = this.amount;
        return data;
    }
}

export interface IAccountUpdateDTO {
    userId: string;
    currency?: string | undefined;
    amount?: number | undefined;
}

export class CategoryAddDTO implements ICategoryAddDTO {
    name!: string;
    description?: string | undefined;

    constructor(data?: ICategoryAddDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CategoryAddDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryAddDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICategoryAddDTO {
    name: string;
    description?: string | undefined;
}

export class CategoryAdminDTO implements ICategoryAdminDTO {
    id!: string;
    name!: string;
    description?: string | undefined;
    specialistsCount!: number;
    specialistIds!: string[];

    constructor(data?: ICategoryAdminDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.specialistIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.specialistsCount = _data["specialistsCount"];
            if (Array.isArray(_data["specialistIds"])) {
                this.specialistIds = [] as any;
                for (let item of _data["specialistIds"])
                    this.specialistIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CategoryAdminDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryAdminDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["specialistsCount"] = this.specialistsCount;
        if (Array.isArray(this.specialistIds)) {
            data["specialistIds"] = [];
            for (let item of this.specialistIds)
                data["specialistIds"].push(item);
        }
        return data;
    }
}

export interface ICategoryAdminDTO {
    id: string;
    name: string;
    description?: string | undefined;
    specialistsCount: number;
    specialistIds: string[];
}

export class CategoryAdminDTOPagedResponse implements ICategoryAdminDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: CategoryAdminDTO[];

    constructor(data?: ICategoryAdminDTOPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CategoryAdminDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryAdminDTOPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryAdminDTOPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICategoryAdminDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: CategoryAdminDTO[];
}

export class CategoryAdminDTOPagedResponseRequestResponse implements ICategoryAdminDTOPagedResponseRequestResponse {
    response?: CategoryAdminDTOPagedResponse;
    errorMessage?: ErrorMessage;

    constructor(data?: ICategoryAdminDTOPagedResponseRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? CategoryAdminDTOPagedResponse.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryAdminDTOPagedResponseRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryAdminDTOPagedResponseRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryAdminDTOPagedResponseRequestResponse {
    response?: CategoryAdminDTOPagedResponse;
    errorMessage?: ErrorMessage;
}

export class CategoryAdminDTORequestResponse implements ICategoryAdminDTORequestResponse {
    response?: CategoryAdminDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: ICategoryAdminDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? CategoryAdminDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryAdminDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryAdminDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryAdminDTORequestResponse {
    response?: CategoryAdminDTO;
    errorMessage?: ErrorMessage;
}

export class CategoryDTO implements ICategoryDTO {
    id!: string;
    name!: string;
    description?: string | undefined;

    constructor(data?: ICategoryDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CategoryDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICategoryDTO {
    id: string;
    name: string;
    description?: string | undefined;
}

export class CategoryDTOPagedResponse implements ICategoryDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: CategoryDTO[];

    constructor(data?: ICategoryDTOPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CategoryDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CategoryDTOPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDTOPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICategoryDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: CategoryDTO[];
}

export class CategoryDTOPagedResponseRequestResponse implements ICategoryDTOPagedResponseRequestResponse {
    response?: CategoryDTOPagedResponse;
    errorMessage?: ErrorMessage;

    constructor(data?: ICategoryDTOPagedResponseRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? CategoryDTOPagedResponse.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryDTOPagedResponseRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDTOPagedResponseRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryDTOPagedResponseRequestResponse {
    response?: CategoryDTOPagedResponse;
    errorMessage?: ErrorMessage;
}

export class CategoryDTORequestResponse implements ICategoryDTORequestResponse {
    response?: CategoryDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: ICategoryDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? CategoryDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryDTORequestResponse {
    response?: CategoryDTO;
    errorMessage?: ErrorMessage;
}

export class CategorySpecialistDTO implements ICategorySpecialistDTO {
    name!: string;

    constructor(data?: ICategorySpecialistDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CategorySpecialistDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CategorySpecialistDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICategorySpecialistDTO {
    name: string;
}

export class CategoryUpdateDTO implements ICategoryUpdateDTO {
    id!: string;
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: ICategoryUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): CategoryUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface ICategoryUpdateDTO {
    id: string;
    name?: string | undefined;
    description?: string | undefined;
}

export enum ErrorCodes {
    Unknown = "Unknown",
    TechnicalError = "TechnicalError",
    EntityNotFound = "EntityNotFound",
    PhysicalFileNotFound = "PhysicalFileNotFound",
    UserAlreadyExists = "UserAlreadyExists",
    WrongPassword = "WrongPassword",
    WrongUser = "WrongUser",
    CannotAdd = "CannotAdd",
    CannotUpdate = "CannotUpdate",
    CannotDelete = "CannotDelete",
    MailSendFailed = "MailSendFailed",
    AccountAlreadyExists = "AccountAlreadyExists",
    EntityAlreadyExists = "EntityAlreadyExists",
}

export class ErrorMessage implements IErrorMessage {
    message?: string;
    code?: ErrorCodes;
    status?: HttpStatusCode;

    constructor(data?: IErrorMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.code = _data["code"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ErrorMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["code"] = this.code;
        data["status"] = this.status;
        return data;
    }
}

export interface IErrorMessage {
    message?: string;
    code?: ErrorCodes;
    status?: HttpStatusCode;
}

export enum HttpStatusCode {
    Continue = "Continue",
    SwitchingProtocols = "SwitchingProtocols",
    Processing = "Processing",
    EarlyHints = "EarlyHints",
    OK = "OK",
    Created = "Created",
    Accepted = "Accepted",
    NonAuthoritativeInformation = "NonAuthoritativeInformation",
    NoContent = "NoContent",
    ResetContent = "ResetContent",
    PartialContent = "PartialContent",
    MultiStatus = "MultiStatus",
    AlreadyReported = "AlreadyReported",
    IMUsed = "IMUsed",
    MultipleChoices = "MultipleChoices",
    MovedPermanently = "MovedPermanently",
    Found = "Found",
    SeeOther = "SeeOther",
    NotModified = "NotModified",
    UseProxy = "UseProxy",
    Unused = "Unused",
    TemporaryRedirect = "TemporaryRedirect",
    PermanentRedirect = "PermanentRedirect",
    BadRequest = "BadRequest",
    Unauthorized = "Unauthorized",
    PaymentRequired = "PaymentRequired",
    Forbidden = "Forbidden",
    NotFound = "NotFound",
    MethodNotAllowed = "MethodNotAllowed",
    NotAcceptable = "NotAcceptable",
    ProxyAuthenticationRequired = "ProxyAuthenticationRequired",
    RequestTimeout = "RequestTimeout",
    Conflict = "Conflict",
    Gone = "Gone",
    LengthRequired = "LengthRequired",
    PreconditionFailed = "PreconditionFailed",
    RequestEntityTooLarge = "RequestEntityTooLarge",
    RequestUriTooLong = "RequestUriTooLong",
    UnsupportedMediaType = "UnsupportedMediaType",
    RequestedRangeNotSatisfiable = "RequestedRangeNotSatisfiable",
    ExpectationFailed = "ExpectationFailed",
    MisdirectedRequest = "MisdirectedRequest",
    UnprocessableEntity = "UnprocessableEntity",
    Locked = "Locked",
    FailedDependency = "FailedDependency",
    UpgradeRequired = "UpgradeRequired",
    PreconditionRequired = "PreconditionRequired",
    TooManyRequests = "TooManyRequests",
    RequestHeaderFieldsTooLarge = "RequestHeaderFieldsTooLarge",
    UnavailableForLegalReasons = "UnavailableForLegalReasons",
    InternalServerError = "InternalServerError",
    NotImplemented = "NotImplemented",
    BadGateway = "BadGateway",
    ServiceUnavailable = "ServiceUnavailable",
    GatewayTimeout = "GatewayTimeout",
    HttpVersionNotSupported = "HttpVersionNotSupported",
    VariantAlsoNegotiates = "VariantAlsoNegotiates",
    InsufficientStorage = "InsufficientStorage",
    LoopDetected = "LoopDetected",
    NotExtended = "NotExtended",
    NetworkAuthenticationRequired = "NetworkAuthenticationRequired",
}

export class LoginDTO implements ILoginDTO {
    email?: string;
    password?: string;

    constructor(data?: ILoginDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDTO {
    email?: string;
    password?: string;
}

export class LoginResponseDTO implements ILoginResponseDTO {
    token!: string;
    user!: UserDTO;

    constructor(data?: ILoginResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user = new UserDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.user = _data["user"] ? UserDTO.fromJS(_data["user"]) : new UserDTO();
        }
    }

    static fromJS(data: any): LoginResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILoginResponseDTO {
    token: string;
    user: UserDTO;
}

export class LoginResponseDTORequestResponse implements ILoginResponseDTORequestResponse {
    response?: LoginResponseDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: ILoginResponseDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? LoginResponseDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LoginResponseDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponseDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILoginResponseDTORequestResponse {
    response?: LoginResponseDTO;
    errorMessage?: ErrorMessage;
}

export enum RejectionReason {
    InvalidSender = "InvalidSender",
    InvalidReceiver = "InvalidReceiver",
    InvalidAmount = "InvalidAmount",
    InsufficientFunds = "InsufficientFunds",
    ExceedsLimit = "ExceedsLimit",
    UserRequest = "UserRequest",
    ManualReview = "ManualReview",
    None = "None",
}

export class ReplyAddDTO implements IReplyAddDTO {
    startDate?: Date | undefined;
    endDate!: Date;
    price!: number;

    constructor(data?: IReplyAddDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): ReplyAddDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyAddDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["price"] = this.price;
        return data;
    }
}

export interface IReplyAddDTO {
    startDate?: Date | undefined;
    endDate: Date;
    price: number;
}

export class ReplyDTO implements IReplyDTO {
    id!: string;
    startDate!: Date;
    endDate!: Date;
    price!: number;
    status!: StatusEnum;

    constructor(data?: IReplyDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.price = _data["price"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ReplyDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["status"] = this.status;
        return data;
    }
}

export interface IReplyDTO {
    id: string;
    startDate: Date;
    endDate: Date;
    price: number;
    status: StatusEnum;
}

export class ReplyDTOPagedResponse implements IReplyDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: ReplyDTO[];

    constructor(data?: IReplyDTOPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ReplyDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReplyDTOPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyDTOPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IReplyDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: ReplyDTO[];
}

export class ReplyDTOPagedResponseRequestResponse implements IReplyDTOPagedResponseRequestResponse {
    response?: ReplyDTOPagedResponse;
    errorMessage?: ErrorMessage;

    constructor(data?: IReplyDTOPagedResponseRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? ReplyDTOPagedResponse.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ReplyDTOPagedResponseRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyDTOPagedResponseRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IReplyDTOPagedResponseRequestResponse {
    response?: ReplyDTOPagedResponse;
    errorMessage?: ErrorMessage;
}

export class ReplyDTORequestResponse implements IReplyDTORequestResponse {
    response?: ReplyDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: IReplyDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? ReplyDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ReplyDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IReplyDTORequestResponse {
    response?: ReplyDTO;
    errorMessage?: ErrorMessage;
}

export class ReplyUpdateDTO implements IReplyUpdateDTO {
    id!: string;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    price?: number | undefined;
    status?: StatusEnum;

    constructor(data?: IReplyUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.price = _data["price"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ReplyUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["price"] = this.price;
        data["status"] = this.status;
        return data;
    }
}

export interface IReplyUpdateDTO {
    id: string;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    price?: number | undefined;
    status?: StatusEnum;
}

export class RequestAddDTO implements IRequestAddDTO {
    receiverUserId!: string;
    requestedStartDate!: Date;
    phoneNumber!: string;
    address!: string;
    description!: string;

    constructor(data?: IRequestAddDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.receiverUserId = _data["receiverUserId"];
            this.requestedStartDate = _data["requestedStartDate"] ? new Date(_data["requestedStartDate"].toString()) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): RequestAddDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RequestAddDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiverUserId"] = this.receiverUserId;
        data["requestedStartDate"] = this.requestedStartDate ? this.requestedStartDate.toISOString() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["description"] = this.description;
        return data;
    }
}

export interface IRequestAddDTO {
    receiverUserId: string;
    requestedStartDate: Date;
    phoneNumber: string;
    address: string;
    description: string;
}

export class RequestDTO implements IRequestDTO {
    id!: string;
    requestedStartDate!: Date;
    description!: string;
    status!: StatusEnum;
    senderUser?: UserContactInfoDTO;
    receiverUser!: UserContactInfoDTO;
    rejectedAt?: Date | undefined;

    constructor(data?: IRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.receiverUser = new UserContactInfoDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.requestedStartDate = _data["requestedStartDate"] ? new Date(_data["requestedStartDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.status = _data["status"];
            this.senderUser = _data["senderUser"] ? UserContactInfoDTO.fromJS(_data["senderUser"]) : <any>undefined;
            this.receiverUser = _data["receiverUser"] ? UserContactInfoDTO.fromJS(_data["receiverUser"]) : new UserContactInfoDTO();
            this.rejectedAt = _data["rejectedAt"] ? new Date(_data["rejectedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["requestedStartDate"] = this.requestedStartDate ? this.requestedStartDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["status"] = this.status;
        data["senderUser"] = this.senderUser ? this.senderUser.toJSON() : <any>undefined;
        data["receiverUser"] = this.receiverUser ? this.receiverUser.toJSON() : <any>undefined;
        data["rejectedAt"] = this.rejectedAt ? this.rejectedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IRequestDTO {
    id: string;
    requestedStartDate: Date;
    description: string;
    status: StatusEnum;
    senderUser?: UserContactInfoDTO;
    receiverUser: UserContactInfoDTO;
    rejectedAt?: Date | undefined;
}

export class RequestDTOPagedResponse implements IRequestDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: RequestDTO[];

    constructor(data?: IRequestDTOPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(RequestDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RequestDTOPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDTOPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IRequestDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: RequestDTO[];
}

export class RequestDTOPagedResponseRequestResponse implements IRequestDTOPagedResponseRequestResponse {
    response?: RequestDTOPagedResponse;
    errorMessage?: ErrorMessage;

    constructor(data?: IRequestDTOPagedResponseRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? RequestDTOPagedResponse.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestDTOPagedResponseRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDTOPagedResponseRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRequestDTOPagedResponseRequestResponse {
    response?: RequestDTOPagedResponse;
    errorMessage?: ErrorMessage;
}

export class RequestDTORequestResponse implements IRequestDTORequestResponse {
    response?: RequestDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: IRequestDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? RequestDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RequestDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRequestDTORequestResponse {
    response?: RequestDTO;
    errorMessage?: ErrorMessage;
}

export class RequestResponse implements IRequestResponse {
    readonly response?: string | undefined;
    errorMessage?: ErrorMessage;

    constructor(data?: IRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).response = _data["response"];
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRequestResponse {
    response?: string | undefined;
    errorMessage?: ErrorMessage;
}

export class RequestUpdateDTO implements IRequestUpdateDTO {
    id!: string;
    requestedStartDate?: Date | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    description?: string | undefined;
    status?: StatusEnum;

    constructor(data?: IRequestUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.requestedStartDate = _data["requestedStartDate"] ? new Date(_data["requestedStartDate"].toString()) : <any>undefined;
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.description = _data["description"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): RequestUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RequestUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["requestedStartDate"] = this.requestedStartDate ? this.requestedStartDate.toISOString() : <any>undefined;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["description"] = this.description;
        data["status"] = this.status;
        return data;
    }
}

export interface IRequestUpdateDTO {
    id: string;
    requestedStartDate?: Date | undefined;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    description?: string | undefined;
    status?: StatusEnum;
}

export class SpecialistAddDTO implements ISpecialistAddDTO {
    userId!: string;
    phoneNumber!: string;
    address!: string;
    yearsExperience!: number;
    description!: string;
    categories?: string[] | undefined;

    constructor(data?: ISpecialistAddDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.yearsExperience = _data["yearsExperience"];
            this.description = _data["description"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
        }
    }

    static fromJS(data: any): SpecialistAddDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialistAddDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["yearsExperience"] = this.yearsExperience;
        data["description"] = this.description;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        return data;
    }
}

export interface ISpecialistAddDTO {
    userId: string;
    phoneNumber: string;
    address: string;
    yearsExperience: number;
    description: string;
    categories?: string[] | undefined;
}

export class SpecialistDTO implements ISpecialistDTO {
    phoneNumber!: string;
    address!: string;
    yearsExperience!: number;
    description!: string;
    categories!: CategoryDTO[];

    constructor(data?: ISpecialistDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.categories = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.yearsExperience = _data["yearsExperience"];
            this.description = _data["description"];
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(CategoryDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SpecialistDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialistDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["yearsExperience"] = this.yearsExperience;
        data["description"] = this.description;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ISpecialistDTO {
    phoneNumber: string;
    address: string;
    yearsExperience: number;
    description: string;
    categories: CategoryDTO[];
}

export class SpecialistUpdateDTO implements ISpecialistUpdateDTO {
    userId!: string;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    yearsExperience?: number | undefined;
    description?: string | undefined;

    constructor(data?: ISpecialistUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.yearsExperience = _data["yearsExperience"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): SpecialistUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialistUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["yearsExperience"] = this.yearsExperience;
        data["description"] = this.description;
        return data;
    }
}

export interface ISpecialistUpdateDTO {
    userId: string;
    phoneNumber?: string | undefined;
    address?: string | undefined;
    yearsExperience?: number | undefined;
    description?: string | undefined;
}

export enum StatusEnum {
    Pending = "Pending",
    Accepted = "Accepted",
    Rejected = "Rejected",
    Cancelled = "Cancelled",
    Completed = "Completed",
    Failed = "Failed",
}

export class TransactionAddDTO implements ITransactionAddDTO {
    senderUserId?: string | undefined;
    receiverUserId?: string | undefined;
    transactionType!: TransactionEnum;
    externalSource?: string | undefined;
    amount!: number;
    description?: string | undefined;

    constructor(data?: ITransactionAddDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.senderUserId = _data["senderUserId"];
            this.receiverUserId = _data["receiverUserId"];
            this.transactionType = _data["transactionType"];
            this.externalSource = _data["externalSource"];
            this.amount = _data["amount"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): TransactionAddDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionAddDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["senderUserId"] = this.senderUserId;
        data["receiverUserId"] = this.receiverUserId;
        data["transactionType"] = this.transactionType;
        data["externalSource"] = this.externalSource;
        data["amount"] = this.amount;
        data["description"] = this.description;
        return data;
    }
}

export interface ITransactionAddDTO {
    senderUserId?: string | undefined;
    receiverUserId?: string | undefined;
    transactionType: TransactionEnum;
    externalSource?: string | undefined;
    amount: number;
    description?: string | undefined;
}

export class TransactionDTO implements ITransactionDTO {
    id!: string;
    initiatorUserId!: string;
    initiatorUser!: UserTransactionDTO;
    senderUserId?: string | undefined;
    senderUser?: UserTransactionDTO;
    receiverUserId?: string | undefined;
    receiverUser?: UserTransactionDTO;
    transactionType!: TransactionEnum;
    externalSource?: string | undefined;
    amount!: number;
    description?: string | undefined;
    status!: StatusEnum;
    rejectionCode?: RejectionReason;
    rejectionDetails?: string | undefined;

    constructor(data?: ITransactionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.initiatorUser = new UserTransactionDTO();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.initiatorUserId = _data["initiatorUserId"];
            this.initiatorUser = _data["initiatorUser"] ? UserTransactionDTO.fromJS(_data["initiatorUser"]) : new UserTransactionDTO();
            this.senderUserId = _data["senderUserId"];
            this.senderUser = _data["senderUser"] ? UserTransactionDTO.fromJS(_data["senderUser"]) : <any>undefined;
            this.receiverUserId = _data["receiverUserId"];
            this.receiverUser = _data["receiverUser"] ? UserTransactionDTO.fromJS(_data["receiverUser"]) : <any>undefined;
            this.transactionType = _data["transactionType"];
            this.externalSource = _data["externalSource"];
            this.amount = _data["amount"];
            this.description = _data["description"];
            this.status = _data["status"];
            this.rejectionCode = _data["rejectionCode"];
            this.rejectionDetails = _data["rejectionDetails"];
        }
    }

    static fromJS(data: any): TransactionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["initiatorUserId"] = this.initiatorUserId;
        data["initiatorUser"] = this.initiatorUser ? this.initiatorUser.toJSON() : <any>undefined;
        data["senderUserId"] = this.senderUserId;
        data["senderUser"] = this.senderUser ? this.senderUser.toJSON() : <any>undefined;
        data["receiverUserId"] = this.receiverUserId;
        data["receiverUser"] = this.receiverUser ? this.receiverUser.toJSON() : <any>undefined;
        data["transactionType"] = this.transactionType;
        data["externalSource"] = this.externalSource;
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["status"] = this.status;
        data["rejectionCode"] = this.rejectionCode;
        data["rejectionDetails"] = this.rejectionDetails;
        return data;
    }
}

export interface ITransactionDTO {
    id: string;
    initiatorUserId: string;
    initiatorUser: UserTransactionDTO;
    senderUserId?: string | undefined;
    senderUser?: UserTransactionDTO;
    receiverUserId?: string | undefined;
    receiverUser?: UserTransactionDTO;
    transactionType: TransactionEnum;
    externalSource?: string | undefined;
    amount: number;
    description?: string | undefined;
    status: StatusEnum;
    rejectionCode?: RejectionReason;
    rejectionDetails?: string | undefined;
}

export class TransactionDTOPagedResponse implements ITransactionDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: TransactionDTO[];

    constructor(data?: ITransactionDTOPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(TransactionDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransactionDTOPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDTOPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ITransactionDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: TransactionDTO[];
}

export class TransactionDTOPagedResponseRequestResponse implements ITransactionDTOPagedResponseRequestResponse {
    response?: TransactionDTOPagedResponse;
    errorMessage?: ErrorMessage;

    constructor(data?: ITransactionDTOPagedResponseRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? TransactionDTOPagedResponse.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransactionDTOPagedResponseRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDTOPagedResponseRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITransactionDTOPagedResponseRequestResponse {
    response?: TransactionDTOPagedResponse;
    errorMessage?: ErrorMessage;
}

export class TransactionDTORequestResponse implements ITransactionDTORequestResponse {
    response?: TransactionDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: ITransactionDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? TransactionDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransactionDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITransactionDTORequestResponse {
    response?: TransactionDTO;
    errorMessage?: ErrorMessage;
}

export enum TransactionEnum {
    Initial = "Initial",
    Deposit = "Deposit",
    Withdraw = "Withdraw",
    Transfer = "Transfer",
}

export class TransactionUpdateDTO implements ITransactionUpdateDTO {
    id!: string;
    status?: StatusEnum;
    description?: string | undefined;

    constructor(data?: ITransactionUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): TransactionUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["description"] = this.description;
        return data;
    }
}

export interface ITransactionUpdateDTO {
    id: string;
    status?: StatusEnum;
    description?: string | undefined;
}

export class UserAddDTO implements IUserAddDTO {
    firstName!: string;
    lastName!: string;
    email!: string;
    password!: string;
    role!: UserRoleEnum;

    constructor(data?: IUserAddDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): UserAddDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["role"] = this.role;
        return data;
    }
}

export interface IUserAddDTO {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    role: UserRoleEnum;
}

export class UserContactInfoDTO implements IUserContactInfoDTO {
    firstName!: string;
    lastName!: string;
    email!: string;
    phoneNumber!: string;
    address!: string;

    constructor(data?: IUserContactInfoDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): UserContactInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserContactInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        return data;
    }
}

export interface IUserContactInfoDTO {
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber: string;
    address: string;
}

export class UserDTO implements IUserDTO {
    id!: string;
    firstName!: string;
    lastName!: string;
    email!: string;
    role!: UserRoleEnum;
    account?: AccountDTO;
    specialist?: SpecialistDTO;

    constructor(data?: IUserDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.role = _data["role"];
            this.account = _data["account"] ? AccountDTO.fromJS(_data["account"]) : <any>undefined;
            this.specialist = _data["specialist"] ? SpecialistDTO.fromJS(_data["specialist"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["role"] = this.role;
        data["account"] = this.account ? this.account.toJSON() : <any>undefined;
        data["specialist"] = this.specialist ? this.specialist.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserDTO {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    role: UserRoleEnum;
    account?: AccountDTO;
    specialist?: SpecialistDTO;
}

export class UserDTOPagedResponse implements IUserDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: UserDTO[];

    constructor(data?: IUserDTOPagedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.pageSize = _data["pageSize"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UserDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDTOPagedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTOPagedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["pageSize"] = this.pageSize;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IUserDTOPagedResponse {
    page?: number;
    pageSize?: number;
    totalCount?: number;
    data?: UserDTO[];
}

export class UserDTOPagedResponseRequestResponse implements IUserDTOPagedResponseRequestResponse {
    response?: UserDTOPagedResponse;
    errorMessage?: ErrorMessage;

    constructor(data?: IUserDTOPagedResponseRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? UserDTOPagedResponse.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDTOPagedResponseRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTOPagedResponseRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserDTOPagedResponseRequestResponse {
    response?: UserDTOPagedResponse;
    errorMessage?: ErrorMessage;
}

export class UserDTORequestResponse implements IUserDTORequestResponse {
    response?: UserDTO;
    errorMessage?: ErrorMessage;

    constructor(data?: IUserDTORequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.response = _data["response"] ? UserDTO.fromJS(_data["response"]) : <any>undefined;
            this.errorMessage = _data["errorMessage"] ? ErrorMessage.fromJS(_data["errorMessage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserDTORequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserDTORequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage ? this.errorMessage.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserDTORequestResponse {
    response?: UserDTO;
    errorMessage?: ErrorMessage;
}

export class UserRegisterDTO implements IUserRegisterDTO {
    firstName!: string;
    lastName!: string;
    email!: string;
    password!: string;

    constructor(data?: IUserRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): UserRegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserRegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IUserRegisterDTO {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
}

export enum UserRoleEnum {
    Admin = "Admin",
    Specialist = "Specialist",
    Client = "Client",
}

export class UserSpecialistAddDTO implements IUserSpecialistAddDTO {
    firstName!: string;
    lastName!: string;
    email!: string;
    password!: string;
    phoneNumber!: string;
    address!: string;
    yearsExperience!: number;
    description!: string;

    constructor(data?: IUserSpecialistAddDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phoneNumber = _data["phoneNumber"];
            this.address = _data["address"];
            this.yearsExperience = _data["yearsExperience"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): UserSpecialistAddDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserSpecialistAddDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phoneNumber"] = this.phoneNumber;
        data["address"] = this.address;
        data["yearsExperience"] = this.yearsExperience;
        data["description"] = this.description;
        return data;
    }
}

export interface IUserSpecialistAddDTO {
    firstName: string;
    lastName: string;
    email: string;
    password: string;
    phoneNumber: string;
    address: string;
    yearsExperience: number;
    description: string;
}

export class UserTransactionDTO implements IUserTransactionDTO {
    id!: string;
    firstName!: string;
    lastName!: string;
    email!: string;
    role!: UserRoleEnum;

    constructor(data?: IUserTransactionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): UserTransactionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserTransactionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["role"] = this.role;
        return data;
    }
}

export interface IUserTransactionDTO {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    role: UserRoleEnum;
}

export class UserUpdateDTO implements IUserUpdateDTO {
    id!: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    password?: string | undefined;
    specialist?: SpecialistUpdateDTO;

    constructor(data?: IUserUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.password = _data["password"];
            this.specialist = _data["specialist"] ? SpecialistUpdateDTO.fromJS(_data["specialist"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["password"] = this.password;
        data["specialist"] = this.specialist ? this.specialist.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserUpdateDTO {
    id: string;
    firstName?: string | undefined;
    lastName?: string | undefined;
    password?: string | undefined;
    specialist?: SpecialistUpdateDTO;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
